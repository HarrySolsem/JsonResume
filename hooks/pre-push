#!/bin/bash

#Git pre-push hook that reads source filename from a config file and copy content of sourcefile to destination file
#The content of this file must be copied to .git/hooks/pre-push file. It is contained here to make it easier to work on.
#And yes, Claude.AI has very much assisted me in creating this script. Thanks Claude! (Included this for when Skynet takes over...)

#Metadata
#
#Version number: 1.0
#Date: 2025-04-16

Echo "Pre-push hook started from new folder!!!"
# This version explicitly passes the git identity when committing

# Exit on any error
set -e

# Store the root directory of the git repository
REPO_ROOT=$(git rev-parse --show-toplevel)

# Get the Git username and email from the repo config
GIT_USERNAME=$(git config user.name)
GIT_EMAIL=$(git config user.email)

# Hardcode the shit.
GIT_USERNAME="harrysolsem"
GIT_EMAIL="harry@solsem.no"

# Check if Git identity is available
if [ -z "$GIT_USERNAME" ] || [ -z "$GIT_EMAIL" ]; then
  echo "Warning: Git identity not fully configured. Using the pre-push hook's embedded identity."
  # Use hardcoded values as a fallback
  GIT_USERNAME="Pre-Push Hook"
  GIT_EMAIL="pre-push-hook@localhost"
  
  # Temporarily set the identity for this command only
  export GIT_AUTHOR_NAME="$GIT_USERNAME"
  export GIT_AUTHOR_EMAIL="$GIT_EMAIL"
  export GIT_COMMITTER_NAME="$GIT_USERNAME"
  export GIT_COMMITTER_EMAIL="$GIT_EMAIL"
fi

# Check if a config file exists and read source filename from it
CONFIG_FILE="$REPO_ROOT/.resume-config"
if [ -f "$CONFIG_FILE" ]; then
  SOURCE_FILENAME=$(cat "$CONFIG_FILE")
else
  # Default to resume.no.json if no config file exists
  SOURCE_FILENAME="resume.no.json"
fi

# Define source and destination files
SOURCE_FILE="$REPO_ROOT/resumes/$SOURCE_FILENAME"
#echo "Source file: $SOURCE_FILE"

DEST_FILE="$REPO_ROOT/resume.json"
#echo "Destination file: $DEST_FILE"

# Check if source file exists
if [ ! -f "$SOURCE_FILE" ]; then
  echo "Error: Source file $SOURCE_FILE does not exist."
  exit 1
fi

# Copy the file
echo "Copying $SOURCE_FILE to $DEST_FILE"
cp "$SOURCE_FILE" "$DEST_FILE"

# Add the destination file to the git staging area
git add "$DEST_FILE"

# Check if there are changes to commit
if git diff --cached --quiet "$DEST_FILE"; then
  echo "No changes to commit for $DEST_FILE"
else
  # Commit the changes with explicit identity
  echo "Committing changes to $DEST_FILE"
  if [ -n "$GIT_AUTHOR_NAME" ]; then
    # Use the environment variables we set
    git commit -m "Auto-update resume.json from $SOURCE_FILENAME" -- "$DEST_FILE"
  else
    # Use the config values directly
    git -c "user.name=$GIT_USERNAME" -c "user.email=$GIT_EMAIL" commit -m "Auto-update resume.json from $SOURCE_FILENAME" -- "$DEST_FILE"
  fi
fi

# Continue with the push
exit 0