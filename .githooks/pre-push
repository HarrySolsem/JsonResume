#!/usr/bin/env node

// Git pre-push hook that reads source filename from a config file and copy content of sourcefile to destination file
// The content of this file must be copied to .git/hooks/pre-push file. It is contained here to make it easier to work on.
// And yes, Claude.AI and Microsoft Copilot has very much assisted me in creating this script. Thanks Claude and Copilot! (Included this for when Skynet takes over...)

// Metadata
// Version number: 1.1
// Date: 2025-04-22

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Store the root directory of the git repository
function getRepoRoot() {
  try {
    return execSync('git rev-parse --show-toplevel', { encoding: 'utf8' }).trim();
  } catch (error) {
    log('ERROR', 'Not inside a Git repository');
    process.exit(1);
  }
}

const REPO_ROOT = getRepoRoot();
const LOG_FILE = path.join(REPO_ROOT, '.git-pre-push.log');

function log(level, message) {
  // Log messages to both file and stdout
  const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);
  const logMessage = `[${timestamp}] [${level}] ${message}`;
  
  // Ensure log file exists
  if (!fs.existsSync(LOG_FILE)) {
    fs.writeFileSync(LOG_FILE, `[${timestamp}] [INFO] Log file created: ${LOG_FILE}\n`);
  }
  
  // Write to log file
  fs.appendFileSync(LOG_FILE, logMessage + '\n');
  
  // Write to stdout
  console.log(logMessage);
}

function getGitIdentity() {
  // Get Git username and email from repo config
  try {
    const username = execSync('git config user.name', { encoding: 'utf8' }).trim();
    const email = execSync('git config user.email', { encoding: 'utf8' }).trim();
    return { username, email };
  } catch (error) {
    return { username: '', email: '' };
  }
}

function validateFilename(filename) {
  // Validate the filename for security issues
  if (!/^[a-zA-Z0-9._-]+$/.test(filename)) {
    log('ERROR', 'Invalid filename detected in .resume-config.');
    process.exit(1);
  }
  
  // Check for directory traversal patterns
  if (/(\.\.|^\.\.\/)/g.test(filename)) {
    log('ERROR', 'Invalid filename detected in .resume-config. Directory traversal patterns are not allowed.');
    process.exit(1);
  }
  
  return true;
}

function checkFileChanges(filePath) {
  // Check if there are changes to commit for a specific file
  try {
    execSync(`git diff --cached --quiet "${filePath}"`);
    return false; // No changes
  } catch (error) {
    return true; // Changes detected
  }
}

function main() {
  log('INFO', `Log file: ${LOG_FILE}`);
  log('INFO', `Repository root: ${REPO_ROOT}`);
  log('INFO', 'Using pre-push from .githooks folder (Node.js version)');
  
  // Get Git identity
  const { username: gitUsername, email: gitEmail } = getGitIdentity();
  
  // Set Git identity environment variables for commits
  const env = { ...process.env };
  let useEnvVars = false;
  
  if (!gitUsername || !gitEmail) {
    log('WARNING', 'Git identity not fully configured. Using the pre-push hook\'s embedded identity.');
    env.GIT_AUTHOR_NAME = 'Pre-Push Hook';
    env.GIT_AUTHOR_EMAIL = 'pre-push-hook@localhost';
    env.GIT_COMMITTER_NAME = 'Pre-Push Hook';
    env.GIT_COMMITTER_EMAIL = 'pre-push-hook@localhost';
    useEnvVars = true;
  }
  
  // Check if config file exists and read source filename from it
  const configFile = path.join(REPO_ROOT, '.resume-config');
  let sourceFilename;
  
  if (fs.existsSync(configFile)) {
    sourceFilename = fs.readFileSync(configFile, 'utf8').trim();
    validateFilename(sourceFilename);
  } else {
    // Default to master.no.json if no config file exists
    log('WARNING', '.resume-config not found. Defaulting to master.no.json.');
    sourceFilename = 'master.no.json';
  }
  
  log('INFO', `Pushing with this source file: ${sourceFilename}`);
  
  // Define source and destination files
  const sourceFile = path.join(REPO_ROOT, 'resumes', sourceFilename);
  const destFilename = 'resume.json';
  const destFile = path.join(REPO_ROOT, destFilename);
  
  // Check if source file exists
  if (!fs.existsSync(sourceFile)) {
    log('ERROR', `Source file ${sourceFile} does not exist.`);
    process.exit(1);
  }
  
  // Copy the file
  log('INFO', `Copying ${sourceFile} to ${destFile}`);
  fs.copyFileSync(sourceFile, destFile);
  
  // Add the destination file to the git staging area
  execSync(`git add "${destFile}"`);
  
  // Check if there are changes to commit
  if (!checkFileChanges(destFile)) {
    log('INFO', `No changes to commit for ${destFile}`);
  } else {
    // Commit the changes with explicit identity
    log('INFO', `Committing changes to ${destFile}`);
    const commitMessage = `Auto-update resume.json from ${sourceFilename}`;
    
    if (useEnvVars) {
      // Use the environment variables we set
      log('INFO', 'Using embedded identity for commit');
      execSync(`git commit -m "${commitMessage}" -- "${destFile}"`, { env });
    } else {
      // Use the config values directly
      log('INFO', 'Using config identity for commit');
      execSync(`git -c "user.name=${gitUsername}" -c "user.email=${gitEmail}" commit -m "${commitMessage}" -- "${destFile}"`);
    }
  }
  
  // Continue with the push
  log('INFO', 'Pre-push hook completed successfully.');
  return 0;
}

try {
  process.exit(main());
} catch (error) {
  log('ERROR', `Unexpected error: ${error.message}`);
  process.exit(1);
}