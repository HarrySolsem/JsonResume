#!/usr/bin/env python3

# Git pre-push hook that reads source filename from a config file and copy content of sourcefile to destination file
# The content of this file must be copied to .git/hooks/pre-push file. It is contained here to make it easier to work on.
# And yes, Claude.AI and Microsoft Copilot has very much assisted me in creating this script. Thanks Claude and Copilot! (Included this for when Skynet takes over...)

# Metadata
# Version number: 1.1
# Date: 2025-04-22

import os
import sys
import subprocess
import re
import datetime
import shutil

# Store the root directory of the git repository
def get_repo_root():
    try:
        result = subprocess.run(['git', 'rev-parse', '--show-toplevel'], 
                              capture_output=True, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        log("ERROR", "Not inside a Git repository")
        sys.exit(1)

REPO_ROOT = get_repo_root()
LOG_FILE = os.path.join(REPO_ROOT, ".git-pre-push.log")

def log(level, message):
    """Log messages to both file and stdout"""
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_message = f"[{timestamp}] [{level}] {message}"
    
    # Ensure log file exists
    if not os.path.isfile(LOG_FILE):
        with open(LOG_FILE, 'w') as f:
            f.write(f"[{timestamp}] [INFO] Log file created: {LOG_FILE}\n")
    
    # Write to log file
    with open(LOG_FILE, 'a') as f:
        f.write(log_message + "\n")
    
    # Write to stdout
    print(log_message)

def get_git_identity():
    """Get Git username and email from repo config"""
    try:
        username = subprocess.run(['git', 'config', 'user.name'], 
                                capture_output=True, text=True, check=False).stdout.strip()
        email = subprocess.run(['git', 'config', 'user.email'], 
                             capture_output=True, text=True, check=False).stdout.strip()
        return username, email
    except subprocess.SubprocessError:
        return "", ""

def validate_filename(filename):
    """Validate the filename for security issues"""
    if re.search(r'[^a-zA-Z0-9._-]', filename):
        log("ERROR", "Invalid filename detected in .resume-config.")
        sys.exit(1)
    
    # Check for directory traversal patterns
    if re.search(r'(\.\./|^\.\.)', filename):
        log("ERROR", "Invalid filename detected in .resume-config. Directory traversal patterns are not allowed.")
        sys.exit(1)
    
    return True

def check_file_changes(file_path):
    """Check if there are changes to commit for a specific file"""
    try:
        subprocess.run(['git', 'diff', '--cached', '--quiet', file_path], check=True)
        return False  # No changes
    except subprocess.CalledProcessError:
        return True  # Changes detected

def main():
    log("INFO", f"Log file: {LOG_FILE}")
    log("INFO", f"Repository root: {REPO_ROOT}")
    log("INFO", "Using pre-push from .githooks folder (Python version)")
    
    # Get Git identity
    git_username, git_email = get_git_identity()
    
    # Set Git identity environment variables for commits
    env = os.environ.copy()
    if not git_username or not git_email:
        log("WARNING", "Git identity not fully configured. Using the pre-push hook's embedded identity.")
        git_username = "Pre-Push Hook"
        git_email = "pre-push-hook@localhost"
        env["GIT_AUTHOR_NAME"] = git_username
        env["GIT_AUTHOR_EMAIL"] = git_email
        env["GIT_COMMITTER_NAME"] = git_username
        env["GIT_COMMITTER_EMAIL"] = git_email
    
    # Check if config file exists and read source filename from it
    config_file = os.path.join(REPO_ROOT, ".resume-config")
    if os.path.isfile(config_file):
        with open(config_file, 'r') as f:
            source_filename = f.read().strip()
        validate_filename(source_filename)
    else:
        # Default to master.no.json if no config file exists
        log("WARNING", ".resume-config not found. Defaulting to master.no.json.")
        source_filename = "master.no.json"
    
    log("INFO", f"Pushing with this source file: {source_filename}")
    
    # Define source and destination files
    source_file = os.path.join(REPO_ROOT, "resumes", source_filename)
    dest_filename = "resume.json"
    dest_file = os.path.join(REPO_ROOT, dest_filename)
    
    # Check if source file exists
    if not os.path.isfile(source_file):
        log("ERROR", f"Source file {source_file} does not exist.")
        sys.exit(1)
    
    # Copy the file
    log("INFO", f"Copying {source_file} to {dest_file}")
    shutil.copy2(source_file, dest_file)
    
    # Add the destination file to the git staging area
    subprocess.run(['git', 'add', dest_file], check=True)
    
    # Check if there are changes to commit
    if not check_file_changes(dest_file):
        log("INFO", f"No changes to commit for {dest_file}")
    else:
        # Commit the changes with explicit identity
        log("INFO", f"Committing changes to {dest_file}")
        commit_message = f"Auto-update resume.json from {source_filename}"
        
        if "GIT_AUTHOR_NAME" in env:
            # Use the environment variables we set
            log("INFO", "Using embedded identity for commit")
            subprocess.run(['git', 'commit', '-m', commit_message, '--', dest_file], 
                         env=env, check=True)
        else:
            # Use the config values directly
            log("INFO", "Using config identity for commit")
            subprocess.run(['git', '-c', f'user.name={git_username}', 
                          '-c', f'user.email={git_email}', 
                          'commit', '-m', commit_message, '--', dest_file], 
                         check=True)
    
    # Continue with the push
    log("INFO", "Pre-push hook completed successfully.")
    return 0

if __name__ == "__main__":
    sys.exit(main())