#!/bin/bash

# Git pre-push hook that reads source filename from a config file and copy content of sourcefile to destination file
# The content of this file must be copied to .git/hooks/pre-push file. It is contained here to make it easier to work on.
# And yes, Claude.AI and Microsoft Copilot has very much assisted me in creating this script. Thanks Claude and Copilot! (Included this for when Skynet takes over...)

# Metadata
# Version number: 1.1
# Date: 2025-04-20


# This version explicitly passes the git identity when committing
# Store the root directory of the git repository
REPO_ROOT=$(git rev-parse --show-toplevel || { log "Error" "Not inside a Git repository"; exit 1; })

LOG_FILE="$REPO_ROOT/.git-pre-push.log"

# This script is intended to be run as a pre-push hook in a Git repository.


log() {
  #Do the actual logging to file and stdout
  local message="[$(date '+%Y-%m-%d %H:%M:%S')] $1 $2"
  echo "$message" >> "$LOG_FILE"
  echo "$message"
}

#make sure the log file is created in the root of the repository
if [ ! -f "$LOG_FILE" ]; then
    log "INFO" "Log file not found. Creating log file: $LOG_FILE"
    touch "$LOG_FILE"
    log "[INFO]" "log file created: $LOG_FILE"
fi


log "[INFO]" "Log file: $LOG_FILE"
log "[INFO]" "Repository root: $REPO_ROOT"

log "[INFO]" "Using pre-push from .githooks folder"
# Exit on any error
set -euo pipefail

# Get the Git username and email from the repo config
GIT_USERNAME=$(git config user.name)
GIT_EMAIL=$(git config user.email)

#Initialize variables for Git identity to empty strings
GIT_AUTHOR_NAME=""
GIT_AUTHOR_EMAIL=""
GIT_COMMITTER_NAME=""
GIT_COMMITTER_EMAIL=""

# Check if Git identity is available
if [ -z "$GIT_USERNAME" ] || [ -z "$GIT_EMAIL" ]; then
  log "[WARNING]" "Git identity not fully configured. Using the pre-push hook's embedded identity."
  # Use hardcoded values as a fallback
  GIT_USERNAME="Pre-Push Hook"
  GIT_EMAIL="pre-push-hook@localhost"
  
  # Temporarily set the identity for this command only
  export GIT_AUTHOR_NAME="$GIT_USERNAME"
  export GIT_AUTHOR_EMAIL="$GIT_EMAIL"
  export GIT_COMMITTER_NAME="$GIT_USERNAME"
  export GIT_COMMITTER_EMAIL="$GIT_EMAIL"
fi

# Check if a config file exists and read source filename from it
CONFIG_FILE="$REPO_ROOT/.resume-config"
if [ -f "$CONFIG_FILE" ]; then
  SOURCE_FILENAME=$(cat "$CONFIG_FILE")
  if [[ "$SOURCE_FILENAME" =~ [^a-zA-Z0-9._-] ]]; then
    log "[ERROR]" "Invalid filename detected in .resume-config."
    exit 1
  fi
   # Check for directory traversal patterns
  if [[ "$SOURCE_FILENAME" =~ (\.\./|^\.\.) ]]; then
    log "[ERROR]" "Invalid filename detected in .resume-config. Directory traversal patterns are not allowed."
    exit 1
  fi
else
  # Default to master.no.json if no config file exists
  log "WARNING:" ".resume-config not found. Defaulting to master.no.json."
  SOURCE_FILENAME="master.no.json"
fi

log "[INFO]" "Pushing with this source file: $SOURCE_FILENAME"

# Define source and destination files
SOURCE_FILE="$REPO_ROOT/resumes/$SOURCE_FILENAME"
DEST_FILENAME="resume.json"
DEST_FILE="$REPO_ROOT/$DEST_FILENAME"

# Check if source file exists
if [ ! -f "$SOURCE_FILE" ]; then
  log "[ERROR]" "Source file $SOURCE_FILE does not exist."
  exit 1
fi

# Copy the file
log "[INFO]" "Copying $SOURCE_FILE to $DEST_FILE"
cp "$SOURCE_FILE" "$DEST_FILE"

# Add the destination file to the git staging area
git add "$DEST_FILE"

# Check if there are changes to commit
if git diff --cached --quiet "$DEST_FILE"; then
  log "[INFO]" "No changes to commit for $DEST_FILE"
else
  # Commit the changes with explicit identity
  log "[INFO]" "Committing changes to $DEST_FILE"
  if [ -n "$GIT_AUTHOR_NAME" ]; then
    # Use the environment variables we set
    log "[INFO]" "Using embedded identity for commit"
    git commit -m "Auto-update resume.json from $SOURCE_FILENAME" -- "$DEST_FILE"
  else
    # Use the config values directly
    log "[INFO]" "Using config identity for commit"
    git -c "user.name=$GIT_USERNAME" -c "user.email=$GIT_EMAIL" commit -m "Auto-update resume.json from $SOURCE_FILENAME" -- "$DEST_FILE"
  fi
fi

# Continue with the push
log "[INFO]" "Pre-push hook completed successfully."
exit 0